import React, { useEffect, useState } from "react";
import axios from "axios";

export default function BusinessLocationModal({ show, onClose, vendorId, onUpdate }) {
  const [vendorLocation, setVendorLocation] = useState(null);

  useEffect(() => {
    if (show && vendorId) fetchLocation();
  }, [show, vendorId]);

  const fetchLocation = async () => {
    try {
      const res = await axios.get(`http://localhost:5000/api/vendors/${vendorId}/location`);
      const nearby = res.data?.nearbyLocations || [];
      while (nearby.length < 5) nearby.push(""); // ensure 5 slots
      const updatedLocation = { ...res.data, nearbyLocations: nearby };
      setVendorLocation(updatedLocation);

      if (onUpdate) onUpdate(vendorId, nearby); // update parent
    } catch (err) {
      console.error(err);
      alert("Failed to fetch business locations");
    }
  };

  const saveNearby = async (index) => {
    const value = vendorLocation.nearbyLocations[index].trim();
    try {
      if (value === "") {
        await axios.delete(`http://localhost:5000/api/vendors/vendor-locations/${vendorId}/nearby/${index}`);
      } else {
        await axios.put(`http://localhost:5000/api/vendors/vendor-locations/${vendorId}/nearby/${index}`, { location: value });
      }
      fetchLocation();
    } catch (err) {
      console.error(err);
      alert("Failed to save location");
    }
  };

  const handleDelete = async (index) => {
    try {
      // Directly call the DELETE endpoint for the specific index
      await axios.delete(`http://localhost:5000/api/vendors/vendor-locations/${vendorId}/nearby/${index}`);
      fetchLocation(); // Re-fetch to get the updated list with the empty slot
    } catch (err) {
      console.error("Failed to delete location:", err);
      alert("Failed to delete location");
    }
  };

  const handleChange = (index, value) => {
    const updated = [...vendorLocation.nearbyLocations];
    updated[index] = value;
    setVendorLocation({ ...vendorLocation, nearbyLocations: updated });
  };

  if (!show) return null;
  if (!vendorLocation) return <p>Loading nearby locations...</p>;

  return (
    <div
      style={{
        position: "fixed", top: 0, left: 0, right: 0, bottom: 0,
        background: "rgba(0,0,0,0.5)", display: "flex",
        justifyContent: "center", alignItems: "center", zIndex: 1000
      }}
    >
      <div style={{ background: "#fff", padding: 20, borderRadius: 10, minWidth: 350 }}>
        <h2>Business Locations (Nearby)</h2>
        <ul>
          {vendorLocation.nearbyLocations.map((loc, index) => (
            <li key={index} style={{ marginBottom: 8, display: "flex", alignItems: "center" }}>
              <input
                type="text"
                value={loc}
                placeholder={`Nearby location ${index + 1}`}
                onChange={(e) => handleChange(index, e.target.value)}
                style={{ flex: 1, padding: 4 }}
              />
              <button onClick={() => saveNearby(index)} style={{ marginLeft: 6 }}>Save</button>
              {loc && (
                <button
                  onClick={() => handleDelete(index)}
                  style={{ marginLeft: 6 }}
                >
                  Delete
                </button>
              )}
            </li>
          ))}
        </ul>

        <button onClick={onClose} style={{ marginTop: 20, padding: "6px 12px" }}>Close</button>
      </div>
    </div>
  );
}